"use strict";(self.webpackChunkve_ps=self.webpackChunkve_ps||[]).push([[542],{4137:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(t),m=a,h=d["".concat(l,".").concat(m)]||d[m]||p[m]||s;return t?r.createElement(h,o(o({ref:n},u),{},{components:t})):r.createElement(h,o({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,o=new Array(s);o[0]=d;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var c=2;c<s;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3139:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var r=t(7462),a=(t(7294),t(4137));const s={sidebar_position:3,description:"Monitoring Venom transactions"},o="Monitoring Venom transactions",i={unversionedId:"build/development-guides/using-ever-sdk-and-devtools-to-work-with-venom/monitoring-transactions",id:"build/development-guides/using-ever-sdk-and-devtools-to-work-with-venom/monitoring-transactions",title:"Monitoring Venom transactions",description:"Monitoring Venom transactions",source:"@site/docs/build/development-guides/using-ever-sdk-and-devtools-to-work-with-venom/monitoring-transactions.md",sourceDirName:"build/development-guides/using-ever-sdk-and-devtools-to-work-with-venom",slug:"/build/development-guides/using-ever-sdk-and-devtools-to-work-with-venom/monitoring-transactions",permalink:"/build/development-guides/using-ever-sdk-and-devtools-to-work-with-venom/monitoring-transactions",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,description:"Monitoring Venom transactions"},sidebar:"buildSidebar",previous:{title:"Sending transactions in Venom",permalink:"/build/development-guides/using-ever-sdk-and-devtools-to-work-with-venom/sending-transactions"},next:{title:"Tools & Resources",permalink:"/build/tools-and-resources"}},l={},c=[{value:"Pagination",id:"pagination",level:2},{value:"Subscription",id:"subscription",level:2},{value:"How to determine a successful transaction?",id:"how-to-determine-a-successful-transaction",level:2}],u={toc:c};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"monitoring-venom-transactions"},"Monitoring Venom transactions"),(0,a.kt)("p",null,"Previous guides went into detail about ",(0,a.kt)("a",{parentName:"p",href:"/build/development-guides/using-ever-sdk-and-devtools-to-work-with-venom/setting-up-wallet-account"},"wallet setup")," and ",(0,a.kt)("a",{parentName:"p",href:"/build/development-guides/using-ever-sdk-and-devtools-to-work-with-venom/sending-transactions"},"sending transactions")," on Venom. "),(0,a.kt)("p",null,"Now let's assume we need to reliably know when funds are sent from or received to a wallet. Samples of transaction ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/tonlabs/sdk-samples/tree/master/demo/paginate-transactions"},"pagination")," and ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/tonlabs/sdk-samples/tree/master/demo/subscribe-transactions"},"subscription")," are available in the samples repository. An overview of the relevant parts is given below."),(0,a.kt)("p",null,"In these samples JS SDK is used. ",(0,a.kt)("a",{parentName:"p",href:"https://docs.everos.dev/ever-sdk/#community-bindings"},"Bindings")," for a large number of languages have been developed for SDK."),(0,a.kt)("h2",{id:"pagination"},"Pagination"),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/tonlabs/sdk-samples/tree/master/demo/paginate-transactions"},"pagination")," sample queries and displays transactions in workchain 0 (workchain where simple transfers happen, -1 workchain is masterchain where you can find service transactions and validator transactions) from the beginning. We can get all the transaction and filter by account addresses on the backend side."),(0,a.kt)("p",null,"To run the sample, clone the repository, save the Venom endpoit as an environment variable and launch:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"export ENDPOINT=https://gql-testnet.venom.foundation/graphql\nnpm i\nnpm run list-tr\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'   async function main(client: TonClient) {\n    // In this example, we want the query to return 2 items per page.\n    const itemsPerPage = 25\n\n    // Pagination connection pattern requires a cursor, which will be set latter\n    let cursor: string = undefined\n\n    // The idiomatic way to send a request is to specify \n    // query and variables as separate properties.\n    const transactionsQuery = `\n        query listTransactions($cursor: String, $count: Int) {\n            blockchain {\n                transactions(\n                    workchain: 0\n                    first: $count\n                    after: $cursor\n                 ) {\n                    edges {\n                        node { \n                            id\n                            balance_delta\n                            account_addr\n                            # other transaction fields\n                     }\n                    }\n                    pageInfo { hasNextPage endCursor }\n                }\n            }\n        }`\n\n    for (; ;) {\n        const queryResult: ResultOfQuery = await client.net.query({\n            query: transactionsQuery,\n            variables: {\n                count: itemsPerPage,\n                cursor\n            }\n        });\n        const transactions = queryResult.result.data.blockchain.transactions;\n\n        for (const edge of transactions.edges) {\n            console.log("Transaction id:", edge.node.id);\n        }\n        if (transactions.pageInfo.hasNextPage === false) {\n            break;\n        }\n        // To read next page we initialize the cursor:\n        cursor = transactions.pageInfo.endCursor;\n        // TODO: rate limiting\n        await sleep(1000);\n    }\n\n}\nconsole.log("Getting all transactions in workchain 0 from the beginning/")\nconsole.log("Most likely this process will never end, so press CTRL+C to interrupt it")\nmain(client)\n    .then(() => {\n        process.exit(0)\n    })\n    .catch(error => {\n        console.error(error);\n        process.exit(1);\n    })\n\n\n\n// This helper function is used for limiting request rate\nfunction sleep(ms: number) { return new Promise(r => setTimeout(r, ms)) }\n')),(0,a.kt)("h2",{id:"subscription"},"Subscription"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/tonlabs/sdk-samples/tree/master/demo/subscribe-transactions"},"Subscription")," sample subscribes to new transactions of the listed accounts and lists them as they appear."),(0,a.kt)("p",null,"To run the sample, clone the repository, save the Venom endpoit as an environment variable and launch:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"export ENDPOINT=https://gql-testnet.venom.foundation/graphql\nnpm i\nnpm run subscribe-tr\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'async function main() {\n    try {\n        const client = new TonClient({ network: { endpoints: [endpoint] } })\n\n        const queryText = `\n            subscription my($list: [String!]!){\n                transactions(\n                    filter: {account_addr: { in: $list }}\n                ) {\n                    id\n                    account_addr\n                    balance_delta\n                }\n            }`\n\n        // use `client.net.unsubscribe({ handle })` to close subscription\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { handle } = await client.net.subscribe(\n            {\n                subscription: queryText,\n                variables: { list: addressList }\n            },\n            responseHandler,\n        );\n        console.log("Subscribed to transactions of accounts:", JSON.stringify(addressList))\n        console.log("Press CTRL+C to interrupt it")\n\n    } catch (error) {\n        if (error.code === 504) {\n            console.error(\'Network is inaccessible.\');\n        } else {\n            console.error(error);\n        }\n        process.exit(1);\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction responseHandler(params: any, responseType: number) {\n    // Tip: Always wrap the logic inside responseHandler in a try-catch block\n    // or you will be surprised by non-informative errors due to the context\n    // in which the handler is executed\n    try {\n        if (responseType === 100 /* GraphQL data received */) {\n            if (params?.result) {\n                console.log(params.result);\n            }\n\n        } else {\n            // See full list of error codes here:\n            // https://docs.everos.dev/ever-sdk/reference/types-and-methods/mod_net#neterrorcode\n            console.error(params, responseType);\n        }\n    } catch (err) {\n        console.log(err);\n    }\n}\n')),(0,a.kt)("h2",{id:"how-to-determine-a-successful-transaction"},"How to determine a successful transaction?"),(0,a.kt)("p",null,"Not all transactions that are successful are valid transfers and not all transactions that are aborted actually failed. "),(0,a.kt)("p",null,"It depends on the account state before and after the transaction (fields\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"orig_status"),"\xa0and\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"end_status"),"):"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"If the account was already deployed, i.e. if ",(0,a.kt)("inlineCode",{parentName:"p"},"(tx.orig_status == tx.end_status == active)"),"\xa0then you can use\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"tx.aborted")," field. If it is\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"true"),", then the transaction is not successful.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"If the account was not yet deployed then"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"if\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"(orig_status == nonExist && end_status == uninit && aborted == true)"),"\xa0then transaction is successful."),(0,a.kt)("p",{parentName:"li"},"   All the transactions executed on non-deployed accounts are aborted by definition but if we see the state has changed to\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"uninit"),", it means that the transfer was successfully received.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"if\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"(orig_status == uninit && end_status == uninit && aborted == true && in_message.bounce==false)"),"then transaction is successful."),(0,a.kt)("p",{parentName:"li"},"   Non-bounced messages are successfully received by non-deployed accounts, though the transaction status is aborted."),(0,a.kt)("p",{parentName:"li"},"   Instead of checking\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"tx.in_message.bounce==false"),"\xa0you can check if ",(0,a.kt)("inlineCode",{parentName:"p"},"tx.bounce.bounce_type<2"),"\xa0(tx.bounce.bounce_type==2(Ok) is equal to in_message.bounce==true)"))))))}p.isMDXComponent=!0}}]);