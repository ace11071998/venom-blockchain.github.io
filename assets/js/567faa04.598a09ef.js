"use strict";(self.webpackChunkve_ps=self.webpackChunkve_ps||[]).push([[6491],{4137:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},l=Object.keys(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=o.createContext({}),s=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=s(e.components);return o.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,c=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),u=s(n),f=i,m=u["".concat(c,".").concat(f)]||u[f]||p[f]||l;return n?o.createElement(m,a(a({ref:t},d),{},{components:n})):o.createElement(m,a({ref:t},d))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,a=new Array(l);a[0]=u;var r={};for(var c in t)hasOwnProperty.call(t,c)&&(r[c]=t[c]);r.originalType=e,r.mdxType="string"==typeof e?e:i,a[1]=r;for(var s=2;s<l;s++)a[s]=n[s];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3167:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>l,metadata:()=>r,toc:()=>s});var o=n(7462),i=(n(7294),n(4137));const l={sidebar_position:1,sidebar_label:"Quick start developing with TIP-4",description:"This page helps you to instantly start developing with TIP-4 and deploy your NFT collection here and now. Read the next guides, if you want to go deeper."},a="Quick start developing with TIP-4",r={unversionedId:"build/development-guides/how-to-create-your-own-non-fungible-tip-4-token/quick-start-developing-with-tip-4",id:"build/development-guides/how-to-create-your-own-non-fungible-tip-4-token/quick-start-developing-with-tip-4",title:"Quick start developing with TIP-4",description:"This page helps you to instantly start developing with TIP-4 and deploy your NFT collection here and now. Read the next guides, if you want to go deeper.",source:"@site/docs/build/00-development-guides/05-how-to-create-your-own-non-fungible-tip-4-token/01-quick-start-developing-with-tip-4.md",sourceDirName:"build/00-development-guides/05-how-to-create-your-own-non-fungible-tip-4-token",slug:"/build/development-guides/how-to-create-your-own-non-fungible-tip-4-token/quick-start-developing-with-tip-4",permalink:"/build/development-guides/how-to-create-your-own-non-fungible-tip-4-token/quick-start-developing-with-tip-4",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,sidebar_label:"Quick start developing with TIP-4",description:"This page helps you to instantly start developing with TIP-4 and deploy your NFT collection here and now. Read the next guides, if you want to go deeper."},sidebar:"buildSidebar",previous:{title:"Non-Fungible tokens in Venom network",permalink:"/build/development-guides/how-to-create-your-own-non-fungible-tip-4-token/non-fungible-tokens-in-venom-network"},next:{title:"Simple NFT auction",permalink:"/build/development-guides/how-to-create-your-own-non-fungible-tip-4-token/venom-in-action/simple-nft-auction"}},c={},s=[{value:"Source Code",id:"source-code",level:2},{value:"How to deploy your own NFT collection",id:"how-to-deploy-your-own-nft-collection",level:2},{value:"Initialize your NFT project",id:"initialize-your-nft-project",level:3},{value:"Install dependencies",id:"install-dependencies",level:3},{value:"Implement base contracts",id:"implement-base-contracts",level:3},{value:"Deploy action",id:"deploy-action",level:3}],d={toc:s};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"quick-start-developing-with-tip-4"},"Quick start developing with TIP-4"),(0,i.kt)("h2",{id:"source-code"},"Source Code"),(0,i.kt)("p",null,"You can inspect the source code of TIP-4 token implementation by ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/itgoldio/everscale-tip"},"link"),"."),(0,i.kt)("h2",{id:"how-to-deploy-your-own-nft-collection"},"How to deploy your own NFT collection"),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"You need to have an installed Smart Contract Development Environment. If you haven't already, follow ",(0,i.kt)("a",{parentName:"p",href:"../setting-up-the-venom-smart-contract-development-environment"},"this tutorial"),".")),(0,i.kt)("h3",{id:"initialize-your-nft-project"},"Initialize your NFT project"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"npx locklift init --path my-first-nft\n> [INFO]  New Locklift project initialized in .\n> [INFO]  Installing required dependencies...\n> [INFO]  \n> added 181 packages, and audited 182 packages in 13s\n\n> 23 packages are looking for funding\n>   run `npm fund` for details\n\n> found 0 vulnerabilities\n\n> [INFO]  LockLift initialized in my-first-nft happy hacking!\n")),(0,i.kt)("h3",{id:"install-dependencies"},"Install dependencies"),(0,i.kt)("p",null,"TIP-4 is accessible from npm. Let's install it"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"npm i --save-dev @itgold/everscale-tip\n")),(0,i.kt)("h3",{id:"implement-base-contracts"},"Implement base contracts"),(0,i.kt)("p",null,"Next, you should implement two interfaces in two contracts. Firstly, let's deal with Nft contract. The only thing we should do for basics is implementing `TIP4_1Nft``"," "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity",metastring:'title="Nft.sol" lineNumbers="true"',title:'"Nft.sol"',lineNumbers:'"true"'},"pragma ever-solidity >= 0.61.2;\n\npragma AbiHeader expire;\npragma AbiHeader time;\npragma AbiHeader pubkey;\n\nimport '@itgold/everscale-tip/contracts/TIP4_1/TIP4_1Nft.sol';\n\ncontract Nft is TIP4_1Nft {\n\n    constructor(\n        address owner,\n        address sendGasTo,\n        uint128 remainOnNft\n    ) TIP4_1Nft(\n        owner,\n        sendGasTo,\n        remainOnNft\n    ) public {}\n\n}\n")),(0,i.kt)("p",null,"Now we should go for the Collection contract. We should implement ",(0,i.kt)("inlineCode",{parentName:"p"},"TIP4_1Collection")," and write some method for NFT deploying."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity",metastring:'title="Collection.sol" lineNumbers="true"',title:'"Collection.sol"',lineNumbers:'"true"'},"pragma ever-solidity >= 0.61.2;\n\npragma AbiHeader expire;\npragma AbiHeader time;\npragma AbiHeader pubkey;\n\nimport '@itgold/everscale-tip/contracts/TIP4_1/TIP4_1Collection.sol';\nimport './Nft.sol';\n\ncontract Collection is TIP4_1Collection {\n\n    constructor(\n        TvmCell codeNft\n    ) TIP4_1Collection (\n        codeNft\n    ) public {\n        tvm.accept();\n    }\n\n    function mintNft() external virtual {\n        require(msg.value > 0.4 ever, 101);\n        tvm.rawReserve(0, 4);\n\n        uint256 id = uint256(_totalSupply);\n        _totalSupply++;\n\n        TvmCell codeNft = _buildNftCode(address(this));\n        TvmCell stateNft = tvm.buildStateInit({\n            contr: Nft,\n            varInit: {_id: id},\n            code: codeNft\n        });\n        new Nft{\n            stateInit: stateNft,\n            value: 0,\n            flag: 128\n        }(\n            msg.sender,\n            msg.sender,\n            0.3 ever\n        );     \n    }\n}\n")),(0,i.kt)("h3",{id:"deploy-action"},"Deploy action"),(0,i.kt)("p",null,"Let's move to deploy action. We need two scripts for this quick start: one for ",(0,i.kt)("inlineCode",{parentName:"p"},"Collection")," deploying, and the second for calling ",(0,i.kt)("inlineCode",{parentName:"p"},"mintNft")," function, that we have implemented."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="1-deploy-collection.ts" lineNumbers="true"',title:'"1-deploy-collection.ts"',lineNumbers:'"true"'},'async function main() {\n  const signer = (await locklift.keystore.getSigner("0"))!;\n  const nftArtifacts = await locklift.factory.getContractArtifacts("NFT");\n  const { contract: sample, tx } = await locklift.factory.deployContract({\n    contract: "Collection",\n    publicKey: signer.publicKey,\n    initParams: {},\n    constructorParams: {\n      codeNft: nftArtifacts.code,\n    },\n    value: locklift.utils.toNano(5),\n  });\n\n  console.log(`Collection deployed at: ${sample.address.toString()}`);\n}\n\nmain()\n  .then(() => process.exit(0))\n  .catch(e => {\n    console.log(e);\n    process.exit(1);\n  });\n\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="2-call-mintNft.ts" lineNumbers="true"',title:'"2-call-mintNft.ts"',lineNumbers:'"true"'},'import { toNano, WalletTypes } from "locklift";\n\n// you can get this parameter as (await locklift.keystore.getSigner("0"))! if you have a seed phrase sets up in key section of locklift config\n// or you can pass this parameter by cli or get them by some file reading for example\n// if phrase or secret was not set up in key section, calling (await locklift.keystore.getSigner("0"))! will give you a different results from launch to lauch\n// we just hardcode it here\nconst COLLECTION_DEPLOY_PUBLIC_KEY = "e85f61aaef0ea43afc14e08e6bd46c3b996974c495a881baccc58760f6349300"\n\nasync function main() {\n    const signer = (await locklift.keystore.getSigner("0"))!;\n    const collectionArtifacts = await locklift.factory.getContractArtifacts("Collection");\n    const nftArtifacts = await locklift.factory.getContractArtifacts("NFT");\n\n    // calculation of deployed Collection contract address\n    const collectionAddress = await locklift.provider.getExpectedAddress(\n        collectionArtifacts.abi,\n        {\n            tvc: collectionArtifacts.tvc,\n            publicKey: COLLECTION_DEPLOY_PUBLIC_KEY,\n            initParams: {} // we don\'t have any initParams for collection\n        }\n    );\n    // initialize contract object by locklift\n    const collectionInsance = await locklift.factory.getDeployedContract(\n        "Collection",\n        collectionAddress\n    );\n\n    // creating new account for Collection calling (or you can get already deployed by locklift.factory.accounts.addExistingAccount)\n    const { account: someAccount } = await locklift.factory.accounts.addNewAccount({\n        type: WalletTypes.WalletV3,\n        value: toNano(10),\n        publicKey: signer.publicKey\n    });\n    // call mintNft function\n    // firstly get current nft id (totalSupply) for future NFT address calculating\n    const {count: id} = await collectionInsance.methods.totalSupply({ answerId: 0 }).call();\n    await collectionInsance.methods.mintNft({}).send({ from: someAccount.address, amount: toNano(1)});\n    const {nft: nftAddress} = await collectionInsance.methods.nftAddress({ answerId: 0, id: id }).call();\n  \n    console.log(`NFT: ${nftAddress.toString()}`);\n}\n  \nmain()\n    .then(() => process.exit(0))\n    .catch(e => {\n        console.log(e);\n        process.exit(1);\n    });\n  \n')),(0,i.kt)("p",null,"Finally, we can deploy a new token to the ",(0,i.kt)("inlineCode",{parentName:"p"},"local")," network. For this, make sure the local node is running, if not follow the next command"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"docker run -d --name local-node -e USER_AGREEMENT=yes -p80:80 tonlabs/local-node\n")),(0,i.kt)("p",null,"and run our scripts"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"npx locklift run -s ./scripts/1-deploy-collection.ts -n local\n> [INFO]  factorySource generated\n> [INFO]  Built\n> Collection deployed at: 0:882c1f7af09efaf506ab313daecb6ce127acfab7d082e28e6dbcff839aa58bba\nnpx locklift run -s ./scripts/2-call-mintNft.ts -n local\n> [INFO]  factorySource generated\n> [INFO]  Built\n> NFT: 0:64a4ea8fa80bf3d2ba78c0a602e39a045786a70b69e879f90e9abe2a2f7f33fe</code></pre>\n")),(0,i.kt)("p",null,"Now you know how to deploy your own NFT collection and mint NFT with TIP-4 standard!"))}p.isMDXComponent=!0}}]);