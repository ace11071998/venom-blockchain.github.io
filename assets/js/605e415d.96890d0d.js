"use strict";(self.webpackChunkve_ps=self.webpackChunkve_ps||[]).push([[9354],{4137:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=o.createContext({}),c=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=c(e.components);return o.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},p=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(t),m=a,f=p["".concat(l,".").concat(m)]||p[m]||u[m]||r;return t?o.createElement(f,i(i({ref:n},d),{},{components:t})):o.createElement(f,i({ref:n},d))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=p;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<r;c++)i[c]=t[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}p.displayName="MDXCreateElement"},1483:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var o=t(7462),a=(t(7294),t(4137));const r={sidebar_position:1,sidebar_label:"Ways of code enhancing"},i="Venom In Action. Ways of code enhancing",s={unversionedId:"build/development-guides/developing-of-simple-voting-system/venom-in-action/ways-of-code-enhancing",id:"build/development-guides/developing-of-simple-voting-system/venom-in-action/ways-of-code-enhancing",title:"Venom In Action. Ways of code enhancing",description:"Let's dive into some best practices and good tone coding.&#x20;",source:"@site/docs/build/00-development-guides/04-developing-of-simple-voting-system/01-venom-in-action/01-ways-of-code-enhancing.md",sourceDirName:"build/00-development-guides/04-developing-of-simple-voting-system/01-venom-in-action",slug:"/build/development-guides/developing-of-simple-voting-system/venom-in-action/ways-of-code-enhancing",permalink:"/build/development-guides/developing-of-simple-voting-system/venom-in-action/ways-of-code-enhancing",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,sidebar_label:"Ways of code enhancing"},sidebar:"buildSidebar",previous:{title:"Voting system contracts",permalink:"/build/development-guides/developing-of-simple-voting-system/venom-in-action/voting-system-contracts"},next:{title:"Non-Fungible tokens in Venom network",permalink:"/build/development-guides/how-to-create-your-own-non-fungible-tip-4-token/non-fungible-tokens-in-venom-network"}},l={},c=[],d={toc:c};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"venom-in-action-ways-of-code-enhancing"},"Venom In Action. Ways of code enhancing"),(0,a.kt)("p",null,"Let's dive into some best practices and good tone coding."," "),(0,a.kt)("p",null,"First of all, if your contract is deploy some another contracts, it's advisable to have a view method for returning new contract address:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity",metastring:'lineNumbers="true"',lineNumbers:'"true"'},"function getBallotAddress(address owner) \n    external\n    view\n    responsible\n    returns (address)\n{\n    TvmCell ballotStateInit = tvm.buildStateInit({\n        contr: Ballot,\n        varInit: {\n            _vote: address(this),\n            _managerPublicKey: _managerPublicKey,\n            _owner: owner\n        },\n        code: _ballotCode\n    });\n    return{value: 0, bounce: false, flag: 64} address(tvm.hash(ballotStateInit));\n}\n")),(0,a.kt)("p",null,"As you can see we used some keywords and syntax, that haven't been discussed before. If function marked with ",(0,a.kt)("inlineCode",{parentName:"p"},"responsible")," keyword, this function will generate an outbound message for caller with value, bounce and flag you set. It's preferable to use exactly ",(0,a.kt)("inlineCode",{parentName:"p"},"{value: 0, bounce: false, flag: 64}")," for this function. Do you remember TIP-3 wallet deploying from our TIP-3 ",(0,a.kt)("a",{parentName:"p",href:"/build/development-guides/how-to-create-your-own-fungible-tip-3-token/venom-in-action/simple-tokensale"},"guide"),"? Function deployEmptyWallet is responsible too. That's why we can set a callback parameter there."),(0,a.kt)("p",null,"The next important point is a success/unsuccess callbacks or events. Enhancing your contract with event emitting wouldn't be amiss.  Especially when you deploys something or ends some case. For example we can add ",(0,a.kt)("inlineCode",{parentName:"p"},"NewBallot")," event (when new ballot deployed) and ",(0,a.kt)("inlineCode",{parentName:"p"},"VoteAccepted")," event (after onBallotUsed callback)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity",metastring:'title="Vote.sol" lineNumbers="true"',title:'"Vote.sol"',lineNumbers:'"true"'},"...\ncontract Vote {\n    event NewBallot(address owner);\n    event VoteAccepted(address ballot, bool accept);\n    ...\n    function deployBallot(address owner, address sendRemainingGasTo) external view {\n        ...\n        emit NewBallot(owner);\n        sendRemainingGasTo.transfer({value: 0, flag: 128, bounce: false});\n        ...\n    }\n    ...\n    function onBallotUsed(address owner, address sendRemainingGasTo, bool accept) external {\n        ...\n        emit VoteAccepted(expectedAddress, accept);\n        sendRemainingGasTo.transfer({value: 0, flag: 128, bounce: false});\n        ...\n    }\n...\n}\n")),(0,a.kt)("p",null,"There is another small hack for helping frontend developer. You can transfer small amount of nanotons (1,2,3..,etc) to owner address. For example:"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"owner.transfer({value: 1, flag: 1, bounce: false))")," "),(0,a.kt)("p",null,"Frontend developer can subscribe on incoming transaction to user's wallet and use this small values for detect contract behavior. For example we can send 1 nanovenom, if vote has beet accepted"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity",metastring:'title="Vote.sol" lineNumbers="true"',title:'"Vote.sol"',lineNumbers:'"true"'},"...\ncontract Vote {\n\n    ...\n    function onBallotUsed(address owner, address sendRemainingGasTo, bool accept) external {\n        ...\n        owner.transfer({value: 1, flag: 1, bounce: false})\n        emit VoteAccepted(expectedAddress, accept);\n        sendRemainingGasTo.transfer({value: 0, flag: 128, bounce: false});\n    }\n...\n}l\n")),(0,a.kt)("p",null,"Pay attention, that events and small value callbacks should be instantiate before any transfers with 128 flag."))}u.isMDXComponent=!0}}]);